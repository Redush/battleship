type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Field {
        Scanner sc = new Scanner(System.in);
        String[][] tabl;
        String[][] fog;
        int x = 17;
        int i1 = 0;
        int i2 = 0;
        int i3 = 0;
        int i4 = 0;

        void printFog() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    System.out.print(fog[i][j] + " ");
                }
                System.out.println();
            }
        }

        void print() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    System.out.print(tabl[i][j] + " ");
                }
                System.out.println();
            }
        }

        void myMethod(Ship ship) {
            boolean isValid = false;
            System.out.printf("Enter the coordinates of the %s (%d cells):\n", ship.getName(), ship.getLength());
            do {
                String line = sc.nextLine();
                line = line.replace(" ", "");
                if (searchIndexes(line)) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    continue;
                }
                if (checkPosition(ship)) {
                    continue;
                }
                takingPosition();
                isValid = true;
            } while (!isValid);


        }

        void shooting() {
            while (true) {
                String line = sc.nextLine();
                int i = 0;
                if (searchIndex(line)) {
                    System.out.println("Error! You entered the wrong coordinates! Try again:");
                    continue;
                }
                if (tabl[i1][i2] == "O" && i <= x) {
                    tabl[i1][i2] = "X";
                    fog[i1][i2] = "X";
                    printFog();
                    System.out.println("You hit a ship! Try again:");
                    print();
                    i++;
                    break;
                } else if (tabl[i1][i2] == "~") {
                    tabl[i1][i2] = "M";
                    fog[i1][i2] = "M";
                    printFog();
                    System.out.println("You missed. Try again:");
                    print();
                    break;
                } else if (i>x) {
                    System.out.println("You sank the last ship. You won. Congratulations!");
                    System.out.println(i);
                    break;
                }
            }
        }

        void takingPosition() {
            if (i1 == i3) {
                for (int i = i2; i <= i4; i++) {
                    tabl[i1][i] = "O";
                }
            } else if (i2 == i4) {
                for (int i = i1; i <= i3; i++) {
                    tabl[i][i2] = "O";
                }
            }
        }

        boolean checkPosition(Ship ship) {
            if (i1 == i3) {
                if (i4 - i2 + 1 != ship.getLength()) {
                    System.out.printf("Error! Wrong length of the %s! Try again:\n", ship.getName());
                    return true;
                }
                if (tabl[i1][i2 - 1] == "O") {
                    System.out.println("Error! You placed it too close to another one. Try again:");
                    return true;
                }
                for (int i = i2; i <= i4; i++) {
                    if (tabl[i1 - 1][i] == "O" || tabl[i1][i] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }
                if (i4 + 1 < 11) {
                    if (tabl[i1][i4 + 1] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }
                if (i1 + 1 < 11) {
                    for (int i = i2; i <= i4; i++) {
                        if (tabl[i1 + 1][i] == "O") {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    }
                }
            } else if (i2 == i4) {
                if (i3 - i1 + 1 != ship.getLength()) {
                    System.out.printf("Error! Wrong length of the %s! Try again:", ship.getName());
                    return true;
                }
                if (tabl[i1 + 1][i2] == "O") {
                    System.out.println("Error! You placed it too close to another one. Try again:");
                    return true;
                }
                for (int i = i1; i <= i3; i++) {
                    if (tabl[i][i2 - 1] == "O" || tabl[i][i2] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }
                if (i2 + 1 < 11) {
                    for (int i = i1; i <= i3; i++) {
                        if (tabl[i][i2 + 1] == "O") {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    }
                }
                if (i3 + 1 < 11) {
                    if (tabl[i3 + 1][i2] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }

            }
            return false;
        }

        boolean searchIndex(String line) {
            i1 = 0;
            i2 = 0;
            if (line.length() == 2) {
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(1)))) {
                        i2 = i;
                        break;
                    }
                }
                if (i1 != 0 && i2 != 0) return false;
            } else if (line.length() == 3) {
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                if (line.charAt(1) == '1' && line.charAt(2) == '0') {
                    i2 = 10;
                }
                if (i1 != 0 && i2 != 0) return false;
            }
            return true;
        }

        boolean searchIndexes(String line) {
            int t = 0;
            if (line.length() == 4) {
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(1)))) {
                        i2 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(2)))) {
                        i3 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(3)))) {
                        i4 = i;
                        break;
                    }
                }
            } else if (line.length() == 5 && line.charAt(1) == '1' && line.charAt(2) == '0') {
                i2 = 10;
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(3)))) {
                        i3 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(4)))) {
                        i4 = i;
                        break;
                    }
                }
            } else if (line.length() == 5 && line.charAt(3) == '1' && line.charAt(4) == '0') {
                i4 = 10;
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(1)))) {
                        i2 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(2)))) {
                        i3 = i;
                        break;
                    }
                }
            } else if (line.length() == 6 && line.charAt(1) == '1' && line.charAt(2) == '0' &&
                    line.charAt(4) == '1' && line.charAt(5) == '0') {
                i2 = 10;
                i4 = 10;
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(3)))) {
                        i3 = i;
                        break;
                    }
                }
            }

            if (i1 == i3) {
                if (i2 > i4) {
                    t = i2;
                    i2 = i4;
                    i4 = t;
                }
            } else if (i2 == i4) {
                if (i1 > i3) {
                    t = i1;
                    i1 = i3;
                    i3 = t;
                }
            }
            if (i1 == 0 || i2 == 0 || i3 == 0 || i4 == 0) {
                return true;
            }
            if (i1 != i3 && i2 != i4) {
                return true;
            }
            return false;
        }

        Field() {
            tabl = new String[11][11];
            char ch = 'A';
            tabl[0][0] = " ";
            for (int i = 1; i < 11; i++) {
                tabl[0][i] = Integer.toString(i);
            }
            for (int i = 1; i < 11; i++) {
                tabl[i][0] = Character.toString(ch);
                ch++;
            }
            for (int i = 1; i < 11; i++) {
                for (int j = 1; j < 11; j++) {
                    tabl[i][j] = "~";
                }
            }
            fog = new String[11][11];
            ch = 'A';
            fog[0][0] = " ";
            for (int i = 1; i < 11; i++) {
                fog[0][i] = Integer.toString(i);
            }
            for (int i = 1; i < 11; i++) {
                fog[i][0] = Character.toString(ch);
                ch++;
            }
            for (int i = 1; i < 11; i++) {
                for (int j = 1; j < 11; j++) {
                    fog[i][j] = "~";
                }
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    enum Ship {

        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        private final String name;
        private final int length;

        public String getName() {
            return name;
        }

        public int getLength() {
            return length;
        }

        Ship(String name, int length) {
            this.name = name;
            this.length = length;
        }

    }
  learner_created: true
- name: src/battleship/Warship.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10597#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 01 Jun 2023 18:40:37 UTC"
record: 4
