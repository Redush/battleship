type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Warship.java
  visible: true
  text: |
    package battleship;

    public class Warship {
        static int lengthOfShips = 17;
        int length;
        int[] indexes;
        int gorizont;
        int vertical;
        int index;



        public void checkIndexes(int i1, int i2) {
            if (i1 == gorizont) {
                for (int i = 0; i < indexes.length; i++) {
                    if (indexes[i] == i2) {
                        length--;
                        lengthOfShips--;
                        if (lengthOfShips == 0) {
                            System.out.println("You sank the last ship. You won. Congratulations!");
                            Field.isValid = false;
                            return;
                        }
                        if (length == 0) {
                            System.out.println("You sank a ship! Specify a new target:");
                        } else if (length > 0) {
                            System.out.println("You hit a ship! Try again:");
                        }
                        break;
                    }
                }
            } else if (i2 == vertical) {
                for (int i = 0; i < indexes.length; i++) {
                    if (indexes[i] == i1) {
                        length--;
                        lengthOfShips--;
                        if (lengthOfShips == 0) {
                            System.out.println("You sank the last ship. You won. Congratulations!");
                            Field.isValid = false;
                            return;
                        }
                        if (length == 0) {
                            System.out.println("You sank a ship! Specify a new target:");
                        } else if (length > 0) {
                            System.out.println("You hit a ship! Try again:");
                        }
                        break;
                    }
                }
            }
        }
        public void setIndexes(Ship ship, int... indexes) {
            if (indexes[0] == indexes[2]) {
                this.indexes = new int[ship.getLength()];
                gorizont = indexes[0];
                for (int i = indexes[1], j = 0; i<=indexes[3]; i++, j++) {
                    this.indexes[j] = i;
                }
            } else if (indexes[1] == indexes[3]) {
                this.indexes = new int[ship.getLength()];
                vertical = indexes[1];
                for (int i = indexes[0], j = 0; i<=indexes[2]; i++, j++) {
                    this.indexes[j] = i;
                }
            }
        }
        public Warship(int length) {
            this.length = length;
        }
    }
  learner_created: true
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Field {
        Scanner sc = new Scanner(System.in);
        String[][] tabl;
        String[][] fog;
        int i1;
        int i2;
        int i3;
        int i4;
        static boolean isValid;

        void printFog() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    System.out.print(fog[i][j] + " ");
                }
                System.out.println();
            }
        }

        void print() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    System.out.print(tabl[i][j] + " ");
                }
                System.out.println();
            }
        }

        void myMethod(Ship ship) {
            isValid = true;
            i1 = 0;
            i2 = 0;
            i3 = 0;
            i4 = 0;
            System.out.printf("Enter the coordinates of the %s (%d cells):\n", ship.getName(), ship.getLength());
            do {
                String line = sc.nextLine();
                line = line.replace(" ", "");
                if (searchIndexes(line)) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    continue;
                }
                if (checkPosition(ship)) {
                    continue;
                }
                ship.setIndexes(ship, i1, i2, i3, i4);
                takingPosition();
                isValid = false;
            } while (isValid);


        }

        void shooting() {
            isValid = true;
            while (isValid) {
                String line = sc.nextLine();
                if (searchIndex(line)) {
                    System.out.println("Error! You entered the wrong coordinates! Try again:");
                    continue;
                }
                if (tabl[i1][i2] == "O") {
                    tabl[i1][i2] = "X";
                    fog[i1][i2] = "X";
                    printFog();
                    shotPlace(i1, i2);
                } else if (tabl[i1][i2] == "~") {
                    tabl[i1][i2] = "M";
                    fog[i1][i2] = "M";
                    printFog();
                    System.out.println("You missed. Try again:");

                } else if (tabl[i1][i2] == "X") {
                    printFog();
                    System.out.println("You hit a ship! Try again:");
                }
            }
        }

        void shotPlace(int i1, int i2) {
            for (Ship ship : Ship.values()) {
                ship.checkIndexes(i1, i2);
            }
        }
        void takingPosition() {
            if (i1 == i3) {
                for (int i = i2; i <= i4; i++) {
                    tabl[i1][i] = "O";
                }
            } else if (i2 == i4) {
                for (int i = i1; i <= i3; i++) {
                    tabl[i][i2] = "O";
                }
            }
        }

        boolean checkPosition(Ship ship) {
            if (i1 == i3) {
                if (i4 - i2 + 1 != ship.getLength()) {
                    System.out.printf("Error! Wrong length of the %s! Try again:\n", ship.getName());
                    return true;
                }
                if (tabl[i1][i2 - 1] == "O") {
                    System.out.println("Error! You placed it too close to another one. Try again:");
                    return true;
                }
                for (int i = i2; i <= i4; i++) {
                    if (tabl[i1 - 1][i] == "O" || tabl[i1][i] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }
                if (i4 + 1 < 11) {
                    if (tabl[i1][i4 + 1] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }
                if (i1 + 1 < 11) {
                    for (int i = i2; i <= i4; i++) {
                        if (tabl[i1 + 1][i] == "O") {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    }
                }
            } else if (i2 == i4) {
                if (i3 - i1 + 1 != ship.getLength()) {
                    System.out.printf("Error! Wrong length of the %s! Try again:", ship.getName());
                    return true;
                }
                if (tabl[i1 + 1][i2] == "O") {
                    System.out.println("Error! You placed it too close to another one. Try again:");
                    return true;
                }
                for (int i = i1; i <= i3; i++) {
                    if (tabl[i][i2 - 1] == "O" || tabl[i][i2] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }
                if (i2 + 1 < 11) {
                    for (int i = i1; i <= i3; i++) {
                        if (tabl[i][i2 + 1] == "O") {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return true;
                        }
                    }
                }
                if (i3 + 1 < 11) {
                    if (tabl[i3 + 1][i2] == "O") {
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        return true;
                    }
                }

            }
            return false;
        }

        boolean searchIndex(String line) {
            i1 = 0;
            i2 = 0;
            if (line.length() == 2) {
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(1)))) {
                        i2 = i;
                        break;
                    }
                }
                if (i1 != 0 && i2 != 0) return false;
            } else if (line.length() == 3) {
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                if (line.charAt(1) == '1' && line.charAt(2) == '0') {
                    i2 = 10;
                }
                if (i1 != 0 && i2 != 0) return false;
            }
            return true;
        }

        boolean searchIndexes(String line) {
            int t = 0;
            if (line.length() == 4) {
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(1)))) {
                        i2 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(2)))) {
                        i3 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(3)))) {
                        i4 = i;
                        break;
                    }
                }
            } else if (line.length() == 5 && line.charAt(1) == '1' && line.charAt(2) == '0') {
                i2 = 10;
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(3)))) {
                        i3 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(4)))) {
                        i4 = i;
                        break;
                    }
                }
            } else if (line.length() == 5 && line.charAt(3) == '1' && line.charAt(4) == '0') {
                i4 = 10;
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[0][i].equals(String.valueOf(line.charAt(1)))) {
                        i2 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(2)))) {
                        i3 = i;
                        break;
                    }
                }
            } else if (line.length() == 6 && line.charAt(1) == '1' && line.charAt(2) == '0' &&
                    line.charAt(4) == '1' && line.charAt(5) == '0') {
                i2 = 10;
                i4 = 10;
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(0)))) {
                        i1 = i;
                        break;
                    }
                }
                for (int i = 1; i < 11; i++) {
                    if (tabl[i][0].equals(String.valueOf(line.charAt(3)))) {
                        i3 = i;
                        break;
                    }
                }
            }

            if (i1 == i3) {
                if (i2 > i4) {
                    t = i2;
                    i2 = i4;
                    i4 = t;
                }
            } else if (i2 == i4) {
                if (i1 > i3) {
                    t = i1;
                    i1 = i3;
                    i3 = t;
                }
            }
            if (i1 == 0 || i2 == 0 || i3 == 0 || i4 == 0) {
                return true;
            }
            if (i1 != i3 && i2 != i4) {
                return true;
            }
            return false;
        }

        Field() {
            tabl = new String[11][11];
            char ch = 'A';
            tabl[0][0] = " ";
            for (int i = 1; i < 11; i++) {
                tabl[0][i] = Integer.toString(i);
            }
            for (int i = 1; i < 11; i++) {
                tabl[i][0] = Character.toString(ch);
                ch++;
            }
            for (int i = 1; i < 11; i++) {
                for (int j = 1; j < 11; j++) {
                    tabl[i][j] = "~";
                }
            }
            fog = new String[11][11];
            ch = 'A';
            fog[0][0] = " ";
            for (int i = 1; i < 11; i++) {
                fog[0][i] = Integer.toString(i);
            }
            for (int i = 1; i < 11; i++) {
                fog[i][0] = Character.toString(ch);
                ch++;
            }
            for (int i = 1; i < 11; i++) {
                for (int j = 1; j < 11; j++) {
                    fog[i][j] = "~";
                }
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    enum Ship {

        AIRCRAFT_CARRIER("Aircraft Carrier", 5, new Warship(5)),
        BATTLESHIP("Battleship", 4, new Warship(4)),
        SUBMARINE("Submarine", 3, new Warship(3)),
        CRUISER("Cruiser", 3, new Warship(3)),
        DESTROYER("Destroyer", 2, new Warship(2));

        private final String name;
        private final int length;
        private final Warship warship;

        public void setIndexes(Ship ship, int... indexes) {
            warship.setIndexes(ship, indexes);
        }
        public void checkIndexes(int i1, int i2) {
            warship.checkIndexes(i1, i2);
        }

        public String getName() {
            return name;
        }

        public int getLength() {
            return length;
        }

        Ship(String name, int length, Warship warship) {
            this.name = name;
            this.length = length;
            this.warship = warship;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sun, 04 Jun 2023 11:42:52 UTC"
record: -1
